////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////// CONFIGURATION ///// SECTION TO MODIFY FOR YOUR NETWORK //////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char* ssid = "";                                         // name of your Wi-Fi network
const char* password = "";                                     // password for your Wi-Fi network
const char* defaultSSID = "SolarR";                            // name of your SoftAP network
const char* defaultPassword = "12345678";                      // password for your SoftAP network
boolean VolumeForcedActivation = 0;                            // automatic forced activation based on tank volume: 0 or 1
int volume = 100;                                              // Tank volume in liters
byte HOn=00;                                                   // start hour for forced activation
byte MnOn=10;                                                  // start minute for forced activation
byte SecOn=00;                                                 // start second for forced activation
int setTimeOffset = 2;
int NnpOffset = 3600 * setTimeOffset;

#define BUTTON_PIN 33  // Use GPIO26 for the button
#define DEBOUNCE_TIME  100 // the debounce time in millisecond, increase this time if it still chatters
// Variables will change:
int lastSteadyState = LOW;       // the previous steady state from the input pin
int lastFlickerableState = LOW;  // the previous flickerable state from the input pin
int currentState;                // the current reading from the input pin

// the following variables are unsigned longs because the time, measured in
// milliseconds, will quickly become a bigger number than can be stored in an int.
unsigned long lastDebounceTime = 0;  // the last time the output pin was toggled

// Librairies //

#include <HardwareSerial.h>   // https://github.com/espressif/arduino-esp32
#include <RBDdimmer.h>        // dimmer control https://github.com/RobotDynOfficial/RBDDimmer
#include <U8g2lib.h>          // OLED display management https://github.com/olikraus/U8g2_Arduino
#include <Wire.h>             // for esp-Dash
#include <WiFi.h>             // Wi-Fi management
#include <ESPDashPro.h>          // Dash web page https://github.com/ayushsharma82/ESP-DASH
#include <AsyncTCP.h>         // https://github.com/me-no-dev/AsyncTCP 
#include <ESPAsyncWebServer.h>// https://github.com/me-no-dev/ESPAsyncWebServer and https://github.com/bblanchon/ArduinoJson
#include <PubSubClient.h>     //MQTT for Home Assistant https://github.com/knolleary/pubsubclient 
#include <NTPClient.h>        // time management https://github.com/arduino-libraries/NTPClient 
#include <Preferences.h>      // For saving credentials persistently.
#include <ElegantOTA.h>       //OTA updating for the esp
#include <ESP_Google_Sheet_Client.h> //Data loging into
#include "esp_wifi.h"

WiFiUDP ntpUDP;
// NTP server selection to get the time, 3600 = 1 hour is the time zone, and 60000 = 60 seconds is the refresh rate

NTPClient time1(ntpUDP, "pool.ntp.org", NnpOffset, 60000);

#define RXD2 16
#define TXD2 17
#define Relay2 32 // Forced activation, triggered by LOW -Auto/Manual

byte ByteArray[250];
int ByteData[20];
 
U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

//Declarations for variables//

float gridInjectionPower  = -30; // Power injected into the grid in watts
int powerAdjustment = 0;         // Power adjustment
float routingPower = 0;          // Routing power value
float routingPowerOK;            // Routing power threshold
float dimmerStep = 0.0;          // Dimmer step value
float dimmerValue1 = 0.0;        // Dimmer output value for channel 1
float dimmerMaxValue = 95;       // Maximum dimmer value
float dimmerMinValue = 0;        // Minimum dimmer value
float dimmerSsrMode = 100;      //SSR MODE for the dimmer
float Voltage,current1,Energy1,Frequency,PowerFactor1,current2,Energy2,powerDirection;
int heatingPower;                                              // Power sent to the heating tank
int homePowerFlow;                                             // Power flowing in or out of the home
bool Auto = false;                                             // Automatic mode enabled
bool resetFlag = false;                                        // Reset credentials
byte forcedModeOff;                                            // Forced mode Off value
byte forcedModeOn;                                             // Forced mode On value
float dailyEnergySaved = 0;                                    // Energy saved today, reset daily
float initialEnergy;                                           // Energy level at the start of the day
bool startNewDay = true;                                       // Program start flag
float dailyEnergyRequired = 1.162*20*volume/1000;              // Minimum daily energy requirement based on tank volume
float additionalForcedEnergy;                                  // Additional energy for forced mode
unsigned int forcedModeRunTime;                                // Runtime for automatic forced mode
byte HOffC;
byte MnOffC;
byte SecOffC;
byte forcedEndHour;                                            // End hour for forced mode
byte forcedEndMinute;                                          // End minute for forced mode
byte forcedEndSecond;                                          // End second for forced mode
char formattedMinute[2];                                       // Formatted display for forced mode end minutes (2-digit format)
unsigned long currentTime=0;
unsigned long displayTogglePreviousTime=0;                     // Toggle time for displaying daily kWh vs. total kWh
unsigned long wifiReconnectTime=0;                             // Timeout for Wi-Fi reconnection
bool oledDisplayOn = true;                                     // OLED display state
unsigned long displayToggleInterval = 5000;                    // Toggle interval in milliseconds
bool showDaily = true;                                         // Flag to alternate display

double hourlyEnergy = 0;                                       // Tracks energy usage for the current hour
double lastEnergyReading = 0;                                  // Stores the last value of Energy2
unsigned long lastSyncTime = 0;                                // For timing the synchronization
const unsigned long syncInterval = 60000;                      // 1 minute in milliseconds

///  configuration wifi ///

AsyncWebServer server(80);
WiFiClient espClient;
PubSubClient client(espClient);
ESPDash dashboard(&server);

////////////// End configuration wifi ////////

// Preferences for storing Wi-Fi credentials
Preferences preferences;
char savedSSID[32];
char savedPassword[32];

// Dash Card configuration
Tab tab1(&dashboard, "Settings");

Card outputDimmer1(&dashboard, PROGRESS_CARD, "Output Dimmer", "%", 0, 95);
Card consumptionSurplus(&dashboard, ENERGY_CARD, "Active Power (kW)", "");
Card powerToHeater(&dashboard, ENERGY_CARD, "Power Sent to Heater", "Watts");
Card autoManualButton(&dashboard, BUTTON_CARD, "Forced Mode");
Card volumeControlToggle(&dashboard, BUTTON_CARD, "Clock On/Off for Volume Control");
Card startHourSlider(&dashboard, SLIDER_CARD, "Start Time - Hour: ", "h", 0, 23);
Card startMinuteSlider(&dashboard, SLIDER_CARD, "Start Time - Minute: ", "min", 0, 55,5);
Card volumeSlider(&dashboard, SLIDER_CARD, "Volume : ", "l", 80, 200,20);
Card offsetSlider(&dashboard, SLIDER_CARD, "UTC offset : ", "", -5, 5);
Card oledScreenToggle(&dashboard, BUTTON_CARD, "Screen On/Off");
Card energySavedToday(&dashboard, ENERGY_CARD, "Energy Saved Today", "kWh");
Card totalEnergySaved(&dashboard, ENERGY_CARD, "Total Energy Saved", "kwh");
Card totalConsumption(&dashboard, ENERGY_CARD, "Total Grid Consumption", "kWh");
Card voltageCard(&dashboard, ENERGY_CARD, "Voltage (V)", "");
Card frequencyCard(&dashboard, ENERGY_CARD, "Frequency (Hz)", "");

Card resetButton(&dashboard, BUTTON_CARD, "Reset Wi-Fi Credentials");

//Wi-Fi Setup Mode (SoftAP)
void startSoftAP() {
    bool success = WiFi.softAP(defaultSSID, defaultPassword);
    if (!success) {
        Serial.println("Failed to start SoftAP. Check Wi-Fi configuration.");
        return;
    }

    Serial.print("SoftAP started. Connect to Wi-Fi SSID: ");
    Serial.println(defaultSSID);
    Serial.print("SoftAP IP address: ");
    Serial.println(WiFi.softAPIP());
}

//Start Web Server for Configuration

void startWebServer() {
    // Serve the configuration page
    server.on("/login", HTTP_GET, [](AsyncWebServerRequest *request) {
        request->send(200, "text/html",
         "<!DOCTYPE html>"
        "<html>"
        "<head>"
        "<style>"
        "body {"
        "  font-family: Arial, sans-serif;"
        "  background-color: #f4f4f9;"
        "  margin: 0;"
        "  padding: 0;"
        "  display: flex;"
        "  justify-content: center;"
        "  align-items: center;"
        "  height: 100vh;"
        "}"
        "form {"
        "  background: #ffffff;"
        "  padding: 20px;"
        "  border-radius: 8px;"
        "  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);"
        "  max-width: 400px;"
        "  width: 100%;"
        "}"
        "h2 {"
        "  margin-top: 0;"
        "  color: #333333;"
        "}"
        "label {"
        "  display: block;"
        "  margin-bottom: 8px;"
        "  color: #555555;"
        "  font-weight: bold;"
        "}"
        "input[type='text'], input[type='password'] {"
        "  width: calc(100% - 10px);"
        "  padding: 8px;"
        "  margin-bottom: 16px;"
        "  border: 1px solid #dddddd;"
        "  border-radius: 4px;"
        "  font-size: 14px;"
        "}"
        "input[type='submit'] {"
        "  background-color: #007bff;"
        "  color: #ffffff;"
        "  padding: 10px;"
        "  border: none;"
        "  border-radius: 4px;"
        "  cursor: pointer;"
        "  font-size: 16px;"
        "}"
        "input[type='submit']:hover {"
        "  background-color: #0056b3;"
        "}"
        "</style>"
        "</head>"
        "<body>"
        "<form action='/save' method='POST'>"
        "  <h2>Wi-Fi Configuration</h2>"
        "  <label for='ssid'>SSID</label>"
        "  <input type='text' id='ssid' name='ssid' placeholder='Enter Wi-Fi SSID'>"
        "  <label for='password'>Password</label>"
        "  <input type='password' id='password' name='password' placeholder='Enter Wi-Fi Password'>"
        "  <input type='submit' value='Save'>"
        "</form>"
        "</body>"
        "</html>");
    });

    // Save Wi-Fi credentials
    server.on("/save", HTTP_POST, [](AsyncWebServerRequest *request) {
        String ssid, password;

        // Get form parameters
        if (request->hasParam("ssid", true) && request->hasParam("password", true)) {
            ssid = request->getParam("ssid", true)->value();
            password = request->getParam("password", true)->value();

            // Save credentials to Preferences
            preferences.putString("ssid", ssid);
            preferences.putString("password", password);

            request->send(200, "text/html", "<h2>Wi-Fi Credentials Saved. Restarting...</h2>");
            delay(2000);
            ESP.restart();
        } else {
            request->send(400, "text/html", "<h2>Invalid Input</h2>");
        }
    });

    server.begin();
    Serial.println("Web server started.");
}

//Load Saved Credentials and Connect to Wi-Fi
bool setupWiFi() {
    preferences.begin("wifi", false);

    // Load saved credentials
    String ssid = preferences.getString("ssid", "");
    String password = preferences.getString("password", "");

    if (ssid.isEmpty()) {
        // No credentials saved, start in SoftAP mode
        Serial.println("No Wi-Fi credentials saved. Starting in SoftAP mode.");
        WiFi.mode(WIFI_AP);
        if (WiFi.softAP(defaultSSID, defaultPassword)) {
            Serial.print("SoftAP started. Connect to Wi-Fi SSID: ");
            Serial.println(defaultSSID);
            Serial.print("SoftAP IP address: ");
            Serial.println(WiFi.softAPIP());
            startWebServer();
            return true; // SoftAP started successfully
        } else {
            Serial.println("Failed to start SoftAP.");
            return false; // SoftAP failed to start
        }
    } else {
        // Attempt to connect to saved Wi-Fi credentials
        Serial.print("Connecting to Wi-Fi SSID: ");
        Serial.println(ssid);
        WiFi.mode(WIFI_STA);
        WiFi.begin(ssid.c_str(), password.c_str());

        unsigned long startAttemptTime = millis();
        const unsigned long wifiTimeout = 20000; // 20 seconds timeout

        while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < wifiTimeout) {
            delay(500);
            Serial.print(".");
        }

        if (WiFi.status() == WL_CONNECTED) {
            Serial.println("\nConnected to Wi-Fi!");
            Serial.print("IP address: ");
            Serial.println(WiFi.localIP());
            return true; // Wi-Fi connected successfully
        } else {
            // Connection failed
            Serial.println("\nFailed to connect to Wi-Fi.");
            return false; // Wi-Fi connection failed
        }
    }
}
    void resetWiFiCredentials() {
      preferences.begin("wifi", false); // Open preferences in read/write mode

      // Remove the stored SSID and password
      preferences.remove("ssid");
      preferences.remove("password");
      preferences.clear();

      // Clear system-stored Wi-Fi credentials
    esp_err_t err = esp_wifi_restore();
    if (err == ESP_OK) {
        Serial.println("System Wi-Fi credentials cleared.");
    } else {
        Serial.print("Failed to clear system Wi-Fi credentials. Error: ");
        Serial.println(err);
    }

      preferences.end();
      Serial.println("Wi-Fi credentials reset. Restarting...");
      delay(2000);
      ESP.restart(); // Restart the ESP32 to apply changes
  }

TaskHandle_t Task1;
TaskHandle_t Task2;
SemaphoreHandle_t binsem1;

/* Pin assignments */
const int zeroCrossingPin = 35;     // Pin for zero-crossing detection
const int dimmerPulsePin1 = 25;     // Pin for routing pulses on channel 1

dimmerLamp dimmer1(dimmerPulsePin1, zeroCrossingPin);

// Program that uses Core 1 of the ESP32
void handleData ()
{

vTaskDelay(60 / portTICK_PERIOD_MS );

byte msg[] = {0x01,0x03,0x00,0x48,0x00,0x0E,0x44,0x18};

 int i;
 int len=8; 
               

// Send Modbus RTU requests on Serial port 2 

for(i = 0 ; i < len ; i++)
{
      Serial2.write(msg[i]); 
         
}
 len = 0;

////////////////////////////////////////////////////////////////////////////////////////////////////

      

// Receive Modbus RTU data from the JSY-MK-194 sensor


int a = 0;
 while(Serial2.available()) 
 {
ByteArray[a] = Serial2.read();
 a++;
 }

int b = 0;
 String registros;
    for(b = 0 ; b < a ; b++){      

}
////////////////////////////////////////////////////////////////////////////////////////////////////

//////// Conversion HEX /////////////////

ByteData[1] = ByteArray[3] * 16777216 + ByteArray[4] * 65536 + ByteArray[5] * 256 + ByteArray[6];     // Voltage in Volts
ByteData[2] = ByteArray[7] * 16777216 + ByteArray[8] * 65536 + ByteArray[9] * 256 + ByteArray[10];    // Current 1 in Amperes
ByteData[3] = ByteArray[11] * 16777216 + ByteArray[12] * 65536 + ByteArray[13] * 256 + ByteArray[14]; // Power 1 in Watts
ByteData[4] = ByteArray[15] * 16777216 + ByteArray[16] * 65536 + ByteArray[17] * 256 + ByteArray[18]; // Energy 1 in kWh (surplus)
ByteData[7] = ByteArray[27] ; // Current direction 1
ByteData[9] = ByteArray[28] ; // Current direction 2
ByteData[8] = ByteArray[31] * 16777216 + ByteArray[32] * 65536 + ByteArray[33] * 256 + ByteArray[34]; // Frequency in Hz
ByteData[10] = ByteArray[39] * 16777216 + ByteArray[40] * 65536 + ByteArray[41] * 256 + ByteArray[42]; // Current 2 in Amperes
ByteData[11] = ByteArray[43] * 16777216 + ByteArray[44] * 65536 + ByteArray[45] * 256 + ByteArray[46]; // Power 2 in Watts
ByteData[12] = ByteArray[47] * 16777216 + ByteArray[48] * 65536 + ByteArray[49] * 256 + ByteArray[50]; // Energy 2 in kWh (saved)
ByteData[14] = ByteArray[55] * 16777216 + ByteArray[56] * 65536 + ByteArray[57] * 256 + ByteArray[58]; // Energy 2 in kWh (consumption)

////////////////////////////////////////////////////////////////////////////////////////////////////
  

///////// Normalization of values ///////////////

Voltage = ByteData[1] * 0.0001;     // Voltage
current1 = ByteData[2] * 0.0001;     // Current 1
heatingPower = ByteData[3] * 0.0001;     // Power 1
Energy1 = ByteData[4] * 0.0001;     // Energy 1 surplus
powerDirection = ByteData[9];     // Direction
Frequency = ByteData[8] * 0.01;     // Frequency
current2 = ByteData[10] * 0.0001;     // Current 2
homePowerFlow = ByteData[11] * 0.0001;     // Power 2
Energy2 = ByteData[12] * 0.0001;     // Energy 2

if (powerDirection == 1)
   { powerAdjustment = -homePowerFlow;
   }

if (powerDirection == 0)
   { powerAdjustment = homePowerFlow;
   }

////////////////////////////////////////////////////////////////////////////////////////////////////

}

void Task1code( void * pvParameters )
{
for(;;) {

currentTime=millis();

///////////////////////////////////////////////////////////////////////////
if ( Auto == 1 )
    { 
      handleData();
      digitalWrite(Relay2, HIGH);
      dimmerValue1 = 0;
      dimmer1.setState(OFF);
      dimmer1.setPower(dimmerValue1);
           
    }

if (VolumeForcedActivation == 1 && time1.getHours() == HOn && time1.getMinutes() == MnOn && time1.getSeconds() == SecOn && dailyEnergySaved < dailyEnergyRequired)
    {
      handleData();
      marcheForcee ();
    }

if (VolumeForcedActivation == 1 && time1.getHours() == forcedEndHour && time1.getMinutes() == forcedEndMinute && time1.getSeconds() == forcedEndSecond)
    {
      forcedModeRunTime = 0;
      Auto = 0;
    }

if ( Auto == 0 )
    {
      digitalWrite(Relay2, LOW);
      handleData ();

// triac calculation

// injection okay

if ( powerAdjustment < 0 && powerAdjustment > gridInjectionPower  )
    {
      routingPowerOK = 1;
    }
else {
      routingPowerOK = 0;
     }

// Dimmer step adjustments

if (routingPowerOK == 1) {
    dimmerStep = 0.0;
} else if (routingPowerOK == 0) {
    if (powerAdjustment <= -1000) {
        dimmerStep = 5.0;
    } else if (powerAdjustment <= -800) {
        dimmerStep = 3.0;
    } else if (powerAdjustment <= -400) {
        dimmerStep = 2.0;
    } else if (powerAdjustment <= -300) {
        dimmerStep = 1.0;
    } else if (powerAdjustment <= -200) {
        dimmerStep = 0.75;
    } else if (powerAdjustment <= -100) {
        dimmerStep = 0.5;
    } else if (powerAdjustment <= -50) {
        dimmerStep = 0.1;
    } else if (powerAdjustment <= gridInjectionPower) {
        dimmerStep = 0.05;
    } else if (powerAdjustment >= 1000) {
        dimmerStep = -10.0;
    } else if (powerAdjustment >= 800) {
        dimmerStep = -6.0;
    } else if (powerAdjustment >= 400) {
        dimmerStep = -4.0;
    } else if (powerAdjustment >= 300) {
        dimmerStep = -3.0;
    } else if (powerAdjustment >= 200) {
        dimmerStep = -2.0;
    } else if (powerAdjustment >= 100) {
        dimmerStep = -1.0;
    } else if (powerAdjustment >= 50) {
        dimmerStep = -0.5;
    } else if (powerAdjustment >= 1) {
        dimmerStep = -0.1;
    }
}


// Dimmer 1 settings 

dimmerValue1 = dimmerValue1 + dimmerStep;

      if ( dimmerValue1 <= dimmerMinValue )
      {
        dimmer1.setState(OFF);
        dimmer1.setPower(dimmerMinValue);
        dimmerValue1 = dimmerMinValue ;
        delay(60);
      }

      else if ( dimmerValue1 >= dimmerMaxValue )
      {
        dimmer1.setState(ON);
        dimmer1.setPower(dimmerMaxValue);
        dimmerValue1 = dimmerMaxValue ;
        delay(60);
      }

      else 
      {
        dimmer1.setState(ON);
        dimmer1.setPower(dimmerValue1);
        delay(60);
      }

        }
  }

}

void setup() {

  Serial.begin(115200);
  setupWiFi();  //// Start Wi-Fi setup
      while (!setupWiFi()) {
        // Stay in this loop until setupWiFi completes successfully
        delay(1000);
        Serial.println("Waiting for Wi-Fi setup to complete...");
      }

  Serial2.begin(38400, SERIAL_8N1, RXD2, TXD2); //CONNECTION PORT WITH THE JSY-MK-194 SENSOR
  delay(300);
  u8g2.begin(); // OLED
  u8g2.enableUTF8Print(); //necessary to write accented characters
  dimmer1.begin(NORMAL_MODE, ON); 
  WiFi.mode(WIFI_STA); //Optional
  WiFi.begin(ssid, password);
  ElegantOTA.begin(&server);
  server.begin();
  delay(100);
  time1.begin(); //Initialization of the NTP client.
  pinMode(Relay2,OUTPUT);
   pinMode(BUTTON_PIN, INPUT_PULLUP);  // Set the button pin as input

//set the tab for relevant cards
  dashboard.setTitle("SolarRouter");
  startHourSlider.setTab(&tab1); 
  startMinuteSlider.setTab(&tab1);
  resetButton.setTab(&tab1);
  volumeSlider.setTab(&tab1);
  offsetSlider.setTab(&tab1);


// create a binary semaphore for task synchronization
  binsem1 = xSemaphoreCreateBinary();

  //Code to create a Task Core 0//
  xTaskCreatePinnedToCore(
                    Task1code,   /* Task function. */
                    "Task1",     /* name of task. */
                    10000,       /* Stack size of task */
                    NULL,        /* parameter of the task */
                    1,           /* priority of the task */
                    &Task1,      /* Task handle to keep track of created task */
                    0);          /* pin task to core 0 */                  
  delay(500); 

  //Code to create a Task Core 1//
  xTaskCreatePinnedToCore(
                    Task2code,   /* Task function. */
                    "Task2",     /* name of task. */
                    10000,       /* Stack size of task */
                    NULL,        /* parameter of the task */
                    1,           /* priority of the task */
                    &Task2,      /* Task handle to keep track of created task */
                    1);          /* pin task to core 1 */
  delay(500); 
     
}

//Forced operation based on the volume of the tank 

void marcheForcee() {
    dailyEnergyRequired = 1.162*20*volume/1000;
    additionalForcedEnergy = (dailyEnergyRequired * 1000) - (dailyEnergySaved * 1000);
    forcedModeRunTime = ((additionalForcedEnergy * 3600) / (930));  // Forced operation time in seconds based on tank volume
    additionalForcedEnergy = 0;  // Reset after calculation

    // Calculate hours, minutes, and seconds from forced mode runtime
    HOffC = forcedModeRunTime / 3600;
    MnOffC = (forcedModeRunTime % 3600) / 60;
    SecOffC = forcedModeRunTime % 60;

    // Calculate the forced end time
    forcedEndHour = HOn + HOffC;
    forcedEndMinute = MnOn + MnOffC;
    forcedEndSecond = SecOn + SecOffC;

    // Adjust for overflow in seconds and minutes
    if (forcedEndSecond >= 60) {
        forcedEndSecond -= 60;
        forcedEndMinute += 1;
    }

    if (forcedEndMinute >= 60) {
        forcedEndMinute -= 60;
        forcedEndHour += 1;
    }

    // Adjust for overflow in hours (24-hour format)
    if (forcedEndHour >= 24) {
        forcedEndHour -= 24;
    }

    // Disable automatic mode when forced mode is on
    Auto = 1;
}


//program using Core 2 of the ESP32//

void Task2code( void * pvParameters ){

for(;;){

//////////////////////////////////////////////////////////////////
///////////// Automatic wifi reconnection ///////////////////////
//////////////////////////////////////////////////////////////////

   if ((WiFi.status() != WL_CONNECTED) && (currentTime-wifiReconnectTime >= 60000)) {
    WiFi.disconnect();
    WiFi.reconnect();
    wifiReconnectTime = currentTime;
                                                                                }

///////////////////////////////////////////////////////////////////
////////////// End automatic wifi reconnection ///////////////////
///////////////////////////////////////////////////////////////////


//// reboot ESP (dailyEnergySaved) every day at 00:10 AM. ////

  if (time1.getHours() == 00 && time1.getMinutes() == 10 && time1.getSeconds() == 00)
      {
        startNewDay=1;
      }

///  initialization of the day's energy ////

 if ( startNewDay == 1 )
      {
        handleData();
        initialEnergy = Energy1;
        dailyEnergySaved = 0;    // Reset daily saved energy
        startNewDay = 0;
      }
      
 dailyEnergySaved = Energy1 - initialEnergy;

///  display time. ///

  //Update the time.
  NnpOffset = 3600 * setTimeOffset;
  time1.setTimeOffset(NnpOffset); 
  time1.update();
  
  sprintf(formattedMinute, "%02d", forcedEndMinute);    //The time is sent on the serial port in the format 00:00:00 all at once.
 
  
// display DASH web page

        consumptionSurplus.update(powerAdjustment);
        powerToHeater.update(heatingPower);
        totalEnergySaved.update(Energy1);
        totalConsumption.update(Energy2);
        voltageCard.update(Voltage);
        frequencyCard.update(Frequency);
        energySavedToday.update(dailyEnergySaved);
        outputDimmer1.update((int)dimmerValue1);
        autoManualButton.update(Auto);
        volumeControlToggle.update(VolumeForcedActivation);
        startHourSlider.update(HOn);
        volumeSlider.update(volume);
        offsetSlider.update(setTimeOffset);
        startMinuteSlider.update(MnOn);
        oledScreenToggle.update(oledDisplayOn);
        resetButton.update(resetFlag);
        vTaskDelay(60 / portTICK_PERIOD_MS );
        dashboard.sendUpdates();


// boutons page web //

  resetButton.attachCallback([&](int value){
  resetFlag = value;
  resetButton.update(resetFlag);
  dashboard.sendUpdates();
  });

  autoManualButton.attachCallback([&](int value){
  Auto = value;
  autoManualButton.update(Auto);
  dashboard.sendUpdates();
  });
 
  volumeControlToggle.attachCallback([&](int value){
  VolumeForcedActivation = value;
  volumeControlToggle.update(VolumeForcedActivation);
  dashboard.sendUpdates();
  });

  oledScreenToggle.attachCallback([&](int value){
  oledDisplayOn = value;
  oledScreenToggle.update(oledDisplayOn);
  dashboard.sendUpdates();
  });

  startHourSlider.attachCallback([&](int value){
  HOn = value;
  startHourSlider.update(HOn);
  dashboard.sendUpdates();

});

  startMinuteSlider.attachCallback([&](int value){
  MnOn = value;
  startMinuteSlider.update(MnOn);
  dashboard.sendUpdates();
});

volumeSlider.attachCallback([&](int value){
  volume = value;
  volumeSlider.update(volume);
  dashboard.sendUpdates();
});

offsetSlider.attachCallback([&](int value){
  setTimeOffset = value;
  offsetSlider.update(setTimeOffset);
  dashboard.sendUpdates();
});


      if (resetFlag) {
        resetWiFiCredentials(); // Call the reset function
      }

////////////////////////////////////////////////////////////////////////////
//////////////////////////// screen display ///////////////////////////////
////////////////////////////////////////////////////////////////////////////

        u8g2.clearBuffer(); // The buffer is cleared of what is already there.
if (oledDisplayOn == 1)               
  {     u8g2.setFont(u8g2_font_4x6_tf);
        u8g2.drawRFrame(5,5,120,22,11); //  rectangle top-left x and y coordinates / length / height / rounded 
        u8g2.setCursor(60, 47);
        u8g2.setFont(u8g2_font_5x7_tf);
        u8g2.print(WiFi.localIP()); // IP address display. //


if ( Auto == 1)
    { 
   
    u8g2.setFont(u8g2_font_7x13B_tf);
    u8g2.setCursor(30, 20);
    u8g2.print("Forced Mode");  
    u8g2.setFont(u8g2_font_streamline_all_t);
    u8g2.drawGlyph(5, 27, 0x00d9);
    u8g2.setFont(u8g2_font_6x10_tf);
   	u8g2.setCursor(2, 64);
    u8g2.print(time1.getFormattedTime());
    u8g2.setFont(u8g2_font_7x13B_tf);
    u8g2.setCursor(10, 47);
    u8g2.print(powerAdjustment); // injection or surplus //
    if ( forcedModeRunTime > 0)
        {
    u8g2.setFont(u8g2_font_6x10_tf);
    u8g2.setCursor(57, 64);
    u8g2.print("End : "),u8g2.print(forcedEndHour),u8g2.print("h");u8g2.print(formattedMinute);
        }

    u8g2.sendBuffer();  // The image we just constructed is displayed on the screen.
        }

if ( Auto == 0 )
    { 
      if (heatingPower > 20)
       {
        u8g2.setFont(u8g2_font_emoticons21_tr);
        u8g2.drawGlyph(5, 27, 0x0036);
        
       }

      if (heatingPower < 20)
      {
        u8g2.setFont(u8g2_font_emoticons21_tr);
        u8g2.drawGlyph(5, 27, 0x0026);
      }
  
        u8g2.setFont(u8g2_font_7x13B_tf);
        u8g2.setCursor(60, 20);
        u8g2.print(heatingPower);  
        u8g2.setCursor(110, 20);
        u8g2.print("W"); // writing text
        u8g2.setFont(u8g2_font_7x13B_tf);
        u8g2.setCursor(10, 47);
        u8g2.print(powerAdjustment); // injection or surplus //
             
/// alternation of kWh saved per day vs total. /////

if (currentTime - displayTogglePreviousTime >= displayToggleInterval) {
        displayTogglePreviousTime = currentTime; // Reset timer
        showDaily = !showDaily;                 // Toggle flag
    }

    // Display based on the current flag
    u8g2.setFont(u8g2_font_4x6_tf);
    u8g2.setCursor(10, 64);

    if (showDaily) {
        //u8g2.print("Saved Today: ");
        u8g2.setCursor(60, 64);
        u8g2.setFont(u8g2_font_7x13B_tf);
        //u8g2.print(dailyEnergySaved);
    } else {
        //u8g2.print("Saved Total: ");
        u8g2.setCursor(60, 64);
        u8g2.setFont(u8g2_font_7x13B_tf);
        //u8g2.print(Energy1);
    }

    //u8g2.print("kWh");  // Common suffix for both displays
    u8g2.sendBuffer();  // the image we just constructed is displayed on the screen
  
    }
  }

if (oledDisplayOn==0)
  {
    u8g2.clearBuffer();
    u8g2.sendBuffer();
  }
////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// End of screen display //////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

}
}
  
void loop() {
  ElegantOTA.loop();
  /*FIXME
  updateHourlyEnergy();  // Update energy usage
  syncToGoogleSheets();  // Synchronize with Google Sheets every minute
  resetHourlyEnergy();   // Reset hourly energy at the end of the hour
  */
  // read the state of the switch/button:
  currentState = digitalRead(BUTTON_PIN);

  // check to see if you just pressed the button
  // (i.e. the input went from LOW to HIGH), and you've waited long enough
  // since the last press to ignore any noise:

  // If the switch/button changed, due to noise or pressing:
  if (currentState != lastFlickerableState) {
    // reset the debouncing timer
    lastDebounceTime = millis();
    // save the the last flickerable state
    lastFlickerableState = currentState;
  }

  if ((millis() - lastDebounceTime) > DEBOUNCE_TIME) {
    // whatever the reading is at, it's been there for longer than the debounce
    // delay, so take it as the actual current state:

    // if the button state has changed:
    if(lastSteadyState == HIGH && currentState == LOW){
      Serial.println("The button is pressed");
      Auto = !Auto;
      Serial.println(Auto);
    }
    else if(lastSteadyState == LOW && currentState == HIGH)
      Serial.println("The button is released");

    // save the the last steady state
    lastSteadyState = currentState;
  }
}
